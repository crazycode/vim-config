= Installation

If necessary, backup and remove your <tt>~/.vim</tt> directory and
<tt>~/.vimrc</tt> file.

Clone this repository to <tt>~/git</tt>:

  git clone git://github.com/kerryb/vim-config.git ~/.vim

(If you're behind a firewall that blocks port 9418, replace <tt>git:</tt> with
<tt>http:</tt> in the above URL.)

If you're on the BT intranet you can get it from here instead:

  git clone git://git.nat.bt.com/vim-config/vim-config.git ~/.vim

Alternatively, if for some bizarre reason you don't have git installed, you can
download a zip or tar file using the link on
GitHub[http://github.com/kerryb/vim-config].

Finally, symlink <tt>.vimrc</tt>:

  ln -s ~/.vim/vimrc ~/.vimrc

== Keeping up-to-date

  cd ~/.vim
  git pull

Then in vim:

  :helptags ~/.vim/doc

== Local Customisation

Local changes (eg if you prefer a different font or colour scheme) can either
be made in a branch, or in <tt>~/.vimrc.local</tt>.

= Included Plugins

See the plugins' web pages for more information. The keybindings listed are mostly
just those defined or overridden locally, not the ones provided by default.

Plugins are installed in their own directories under <tt>bundle</tt>, thanks to
Pathogen[http://www.vim.org/scripts/script.php?script_id=2332].

== Abolish (1.0)

Work with several variants of a word at once (more[http://www.vim.org/scripts/script.php?script_id=1545])

== ack (0.3.1)

Plugin for the Perl module / CLI script 'ack' (more[http://www.vim.org/scripts/script.php?script_id=2572])

== afterimage (2.1)

Edit PNG and GIF icons by converting them to XPM (more[http://www.vim.org/scripts/script.php?script_id=1617])

== bufexplorer (7.2.8)

Buffer explorer/browser (more[http://www.vim.org/scripts/script.php?script_id=42])

*Keybindings*

,.:: Show buffer explorer

== Command-T (1.0b)

Fast file navigation for VIM (more[http://www.vim.org/scripts/script.php?script_id=3025])

== css_color (0.7)

CSS color preview (more[http://www.vim.org/scripts/script.php?script_id=2150])

== EasyGrep (0.98)

Fast and Easy Find and Replace Across Multiple Files (more[http://www.vim.org/scripts/script.php?script_id=2438])

== endwise (1.0)

Wisely add "end" in ruby, endfunction/endif/more in vim script, etc (more[http://www.vim.org/scripts/script.php?script_id=2386])

== matchit (1.13.2)

Extended % matching for HTML, LaTeX, and many other languages (more[http://www.vim.org/scripts/script.php?script_id=39])

== NERD_tree (4.1.0)

A tree explorer plugin for navigating the filesystem (more[http://www.vim.org/scripts/script.php?script_id=1658])

*Keybindings*

,m:: Show/hide NERDTree
,f:: Show current file in tree

== NERD_commenter (2.2.2)

A plugin that allows for easy commenting of code for many filetypes (more[http://www.vim.org/scripts/script.php?script_id=1218])

== ragtag (2.0)

A set of mappings for HTML, XML, PHP, ASP, eRuby, JSP, and more (more[http://www.vim.org/scripts/script.php?script_id=1896])

== rails (4.3)

Ruby on Rails: easy file navigation, enhanced syntax highlighting, and more (more[http://www.vim.org/scripts/script.php?script_id=1567])

*Keybindings*

,r:: run rake

== repeat (1.0)

Use the repeat command (.) with supported plugins (more[http://www.vim.org/scripts/script.php?script_id=2136])

== ruby debugger (0b4c30 - October 02, 2010)

Ruby Debugger: supports running of specs and cucumber features from within vim (more[http://github.com/astashov/vim-ruby-debugger])

*Keybindings*

,dg:: Start the Debugger
,dr:: Debug the current test (can be a spec or a cucumber feature)
,db:: Toggle breakpoint
,dv:: Show variables window
,dm:: Show breakpoints window
,dt:: Show frames window
,ds:: Step
,df:: Finish
,dn:: Next
,dc:: Continue
,de:: Exit
,dd:: Remove all breakpoints

If you don't have 'spec' or 'cucumber' in your /usr/bin folder, because you're using RVM, you need to add the following lines to your vimrc.local:
  let g:ruby_debugger_spec_path = '$GEM_HOME/bin/spec'
  let g:ruby_debugger_cucumber_path = '$GEM_HOME/bin/cucumber'


== ruby_focused_unit_test (d00332 - August 08, 2010)

Run a focused ruby unit test in vi (more[http://github.com/pgr0ss/ruby_focused_unit_test_vim])

*Keybindings*

,rb:: Run entire test/spec
,rf:: Run focussed test/spec
,rc:: Run focussed contex (ie describe block)

== ruby-refactoring (5028bd - November 06, 2010)

TODO

== scala

Scala support (more[http://www.3plus4.de/scala/])

== SimpleFold (1.5.0)

space-optimized, configurable folds, supports Ruby, Ocaml, Perl, PHP, Java... (more[http://www.vim.org/scripts/script.php?script_id=1868])

*Keybindings*

,F:: Fold

Uses standard vim commands to open and close folds etc (:help fold)

== Slime

Run selected code in a screen session (irb etc) (more[http://technotales.wordpress.com/2007/10/03/like-slime-for-vim/])

*Keybindings*

,x:: Run current paragraph or selection in named screen session
,xx:: Set session/window name

== specky (1.3)

Functions to help make behavioral testing easy with ruby and rspec (more[http://www.vim.org/scripts/script.php?script_id=2286])

*Keybindings*

,ss:: Run spec
,sx:: Switch between spec and implementation
,s':: Cycle between single quotes, double quotes and symbol

*Note:* Doesn't fully support RSpec 2.

== SuperTab (1.1)

Do all your insert-mode completion with Tab (more[http://www.vim.org/scripts/script.php?script_id=1643])

== surround (1.90)

Delete/change/add parentheses/quotes/XML-tags/much more with ease (more[http://www.vim.org/scripts/script.php?script_id=1697])

== syntastic (1.2.0)

Automatic syntax checking (more[http://www.vim.org/scripts/script.php?script_id=2736])

== Tabular (f4d460 - January 27, 2010)

Configurable, flexible, intuitive text aligning (more[http://github.com/godlygeek/tabular/blob/master/doc/Tabular.txt])

*Keybindings*

,tt:: (when text is selected) format tables made with pipes (|)

== unimpaired (1.1)

Pairs of handy bracket maps (more[http://www.vim.org/scripts/script.php?script_id=1590])

= Other Keybindings

ctrl-]:: Jump to definition (requires exuberant ctags[http://blog.tobiascrawley.net/2009/01/01/generating-a-tags-file-from-a-git-hook/])
,rr:: Run ruby file
,s:: Show/hide hidden characters
,h:: Hide search highlighting
,w:: Toggle word wrapping
,sw:: Strip trailing whitespace

= Brackets

Bracket completion is off by default.
To enable, add "call EnableBracketCompletion()" in your vimrc.local
You can disable bracket completion once you've started vim using ":call DisableBracketCompletion()"

Enter a bracket and the system will include a closing bracket of the same type.
Enter bracket twice to prevent the second one being added
Enter bracket and <CR> to add the pair of brackets around an empty line and position the cursor on this line.

= Commands

RB:: Open Ruby ApiDock docs for word under cursor
RR:: Open Rails ApiDock docs for word under cursor
Lorem:: Generate 'lorem ipsum' text
SudoW:: Save using sud (run sudo -v in terminal first)

= Vim Resources

See my vim bookmarks on delicious[http://delicious.com/kjbuckley/vim].
